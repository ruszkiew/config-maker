#!/usr/bin/perl
#
#
# Last Updated by Ed Ruszkiewicz - 3/15/18
#
# Version 3.1 - Started Versioning
# Version 3.1 - Added support for file mode override output file
# Version 3.3 - Added support for file mode template override - new 'r' command line switch	3/15/18

use Getopt::Std;

# global variables
$mode;
$template_file; 
$csv_file;
$device_count;
$cfg_dir = './cfg/';
$override_file = 0;
$output_file_cat = 0;
$template_override = 0;

$time_stamp = localtime;

# load variable definitions and initiate variable hashes
&LoadVariables;

# load constants
&LoadConstants;

# determine mode of operations (Interactive, Template, File)

$mode = I; 		# set default mode to Interactive

&ParseOpts;

SWITCH:{
	if ($mode eq I){
		print "! Operating in Interactive Mode...\n!\n";
		print "! Enter device_id:";
		$template_file = <STDIN>;
		chomp($template_file);
		open (TMPL, "$template_file.tmpl") or die "! ERROR{Main} - Cannot open TEMPLATE FILE:$template_file\n";
		&ReadInteractiveVars;
		&CreateConfig;	
		close(TMPL);
		exit;
	}
	if ($mode eq T){
		print "! Operating in Template Mode...\n!\n";
		open (TMPL, "$template_file") or die "! ERROR{Main} - Cannot open TEMPLATE FILE:$template_file\n";
		&ReadTemplateVars;
		&CreateConfig;	
		close(TMPL);
		exit;
	}
	if ($mode eq F){
		print "! Operating in File Mode...\n!\n";
		open (CSV, "$csv_file") or die "! ERROR{Main} - Cannot open CSV FILE:$template_file\n";
		if($override_file){
			print "! Configuration output will be sent to $cfg_dir$output_file\n!\n";
		}else{
			print "! Output configuration files will be in format of <hostname>.cfg in directory $cfg_dir\n!\n";
		} 
		$device_count = &LoadFileCSV;
		F1: foreach (keys %hostname){
			next F1 if /reg_expr/;	# skip reg_expr key for hash
			&ComputeFileConfig($_);
		}
		print "!\n! Device Configurations Completed...\n";
		print "!\n";
		close(CSV);
		exit;
	}

} #end_switch

sub LoadVariables{
local $var, $var_def;
open (VAR, "variable.def") or die "! ERROR{LoadVariables} - Cannot open FILE:variable.def\n";
while (<VAR>){
 	chomp;
	SWITCH:{
		last SWITCH if $_ =~ /(^#.*)|(^\s.*$)/; # skip comments
		if (($var, $temp, $var_def, $eof) = ($_ =~ /(^\w*)(\s*=\s*)(.*)(\s|$)/)){
			$$var{reg_expr} .= $var_def;}
		} #end_switch
	} #end_while
close (VAR);
} #end_sub

sub LoadConstants{
local $con, $con_val;
open (CON, "constant.def") or die "! ERROR{LoadConstants} - Cannot open FILE:constant.def\n";
while (<CON>){
	chomp;
	SWITCH:{
		last SWITCH if $_ =~ /^#.*/; # skip comments
	        if (($con, $temp, $con_val, $eof) = ($_ =~ /(^\w*)(\s*=\s*)(.*)(\s|$)/)){
			$$con = $con_val;
		} #end_if
	} #end_switch
} #end_while
close (CON);
} #end_sub

sub CheckVariable{
local $var = $_[0];
local $var_val;
if ($mode eq F){		# file mode requires value of variable to be sent in
	$var_val = $_[1];
}else{
	$var_val = $$var;
} #end_if_else

if ($var_val =~ /^$$var{reg_expr}$/){
	if ($mode eq T){ print "! \'$var\' with value $var_val is OK with regular expression \'$$var{reg_expr}\'\n";}
	return 1;
}else{
	if (($mode eq T) or ($mode eq F)){
		print "! ERROR{CheckVariable} - VAR:\'$var\' with value $var_val does not match regular expression \'$$var{reg_expr}\'.\n";
		exit;
	}elsif ($mode eq I){
		print "! ERROR - Variable \'$var\' with value $var_val does not match regular expression \'$$var{reg_expr}\'.\n";
		return 0;
	} #end_els_if
} #end_else 
} #end_sub

sub ReadTemplateVars{
local $var_section = 0;
local $var, $var_value, $temp1, $temp2, $eof;

print "! Verifying Template Variables...\n!\n";
W1: while(<TMPL>){
	chomp;
	if($_ =~ /VARIABLES/){
		$var_section = 1;
		next W1;
	}
	elsif($_ =~ /END_VAR/){
		last W1;
	}
	elsif($_ =~ /^#.*/){
		next W1;
	}
	elsif($var_section){
	       	if (($temp1, $var, $temp2, $var_val, $eof) = ($_ =~ /(^\$)(\w*)(\s*=\s*)(.*)(\s|$)/)){
			$$var = $var_val;
			&CheckVariable($var);
		} #end_if
	} #end_els_if
} #end_while
} #end_sub

sub VerifyCSVtoTemplateVars{
local $var_section = 0;
local $var, $var_value, $temp1, $temp2, $eof;

print "!\n! Verifying Template Variables have values from $csv_file file import...\n";
W1: while(<TMPL>){
        if($_ =~ /VARIABLES/){
	        $var_section = 1;
	        next W1;
	}
	elsif($_ =~ /END_VAR/){
	        last W1;
	}
	elsif($_ =~ /^#.*/){
	        next W1;
        }
	elsif($var_section){
		if (($temp1, $var, $temp2, $var_val, $eof) = ($_ =~ /(^\$)(\w*)(\s*=\s*)(.*)(\s|$)/)){
			if($$var eq ""){ 
				die "! ERROR{VerifyCSVtoTemplateVARS}-Template variable \'$var\' did not obtain value from $csv_file file\n\n";
			} #end_if
		} #end_if
	} #end_elsif
} #end_while
print "! Variables Verified!\n";
} #end_sub

sub ReadInteractiveVars{
local $var_section = 0;
local $var, $var_value, $temp1, $temp2, $eof;
W1: while(<TMPL>){
	chomp;
	if($_ =~ /VARIABLES/){
		$var_section = 1;
		next W1;
	}
	elsif($_ =~ /END_VAR/){
		last W1;
	}
	elsif($_ =~ /^#.*/){
		next W1;
	}
	elsif($var_section){
	        if (($temp1, $var, $temp2, $var_val, $eof) = ($_ =~ /(^\$)(\w*)(\s*=\s*)(.*)(\s|$)/)){
				if ($var eq 'device_id'){ next W1;}
				P2: print "! Enter value for variable $var:";
				$$var = <STDIN>;
				chomp($$var);
				if (&CheckVariable($var) == 0){goto P2;}
		} #end_if
	} #end_elsif

} #end_while
} #end_sub

sub CreateConfig{
local $cfg_section = 0;
local $var;
if ($mode eq F){
	print CFGOUT "!\n! Configuration from template file $template_file for host $hostname at $time_stamp.\n!\n";
}else{
	print "!\n! Configuration from template file $template_file for host $hostname at $time_stamp.\n!\n";
}
W1: while(<TMPL>){
	chomp;
        if($_ =~ /CONFIGURATION/){
                $cfg_section = 1;
                next W1;
        }
        elsif($_ =~ /END_CONF/){
	        $cfg_section = 0;
        	next W1;
        }
	elsif($cfg_section){
		if ($mode eq F){
			print CFGOUT &CreateConfigLine($_) . "\n";
		}else{
			print &CreateConfigLine($_) . "\n";
		} #end_if_else
	} #end_else_if
} #end_while
} #end_sub

sub CreateConfigLine{
my $a, $b, $c;
my $d = pop;
if (($a, $b, $c) = ($d =~ /(^.*?)\$([a-z_A-Z_0-9|\_]*)(.*$)/)){
	return ($a . $$b . &CreateConfigLine($c));
} else {
	return $d;
};

} #end_sub


sub ParseOpts{
local $mode_set = 0;
getopts("d:o:t:if:r:hc");
if ($opt_i){
	$mode=I;
	$mode_set++;
	}
if ($opt_t){
	$mode=T;
	$template_file = $opt_t;
	if (! -f $template_file) {die "ERROR{ParseOpts} - FILE:$template_file cannot be found.\n";}
	$mode_set++;
	}
if ($opt_f){
	$mode=F;
	$csv_file = $opt_f;
	if (! -f $csv_file) {die "ERROR{ParseOpts} - FILE:$csv_file cannot be found\n.";}
	$mode_set++;
	}
if ($opt_d){
	$cfg_dir = $opt_d;
	if (! -d $cfg_dir) {die "ERROR{ParseOpts} - DIRECTORY:$cfg_dir cannot be found\n.";}
	}
if ($opt_o){
	$output_file = $opt_o;
	$override_file = 1;
	}
if ($opt_r){
	$template_file = $opt_r;
	$template_override = 1;
	}
if ($opt_c){
	$output_file_cat = 1;
	}
if ($opt_h){
	&Usage;
	exit;
	}
if ($mode_set > 1){
	die "ERROR{ParseOpts} - Too many modes specified in command line.  See Usage.n";
	}
} #end_sub

sub ComputeFileConfig{
#
local $device = $_[0];

print "!\n! Variables imported from $csv_file file.\n!\n";

# load in variables
for ($i=0; $i<@csv_fields; $i++) {
	${$csv_fields[$i]} = ${$csv_fields[$i]}{$device};
	print "! VARIABLE: $csv_fields[$i] = ${$csv_fields[$i]}{$device}\n";
	&CheckVariable($csv_fields[$i], ${$csv_fields[$i]}{$device});
} #end_for


if($template_override == 0){
	$template_file = $device_id . '.tmpl';
}

open (TMPL, "$template_file") or die "! ERROR{ComputeFileConfig} - Cannot open TEMPLATE FILE:$template_file\n";

&VerifyCSVtoTemplateVars;

if($output_file_cat){
  if($override_file){
	open(CFGOUT, '>>', "$cfg_dir$output_file") or die "! ERROR{ComputeFileConfig} - Cannot create file $cfg_dir$output_file";
  }else{
	open(CFGOUT, '>>', "$cfg_dir$hostname.cfg") or die "! ERROR{ComputeFileConfig} - Cannot create file $cfg_dir$hostname-$device_id.cfg";
  }
}else{
  if($override_file){
	open(CFGOUT, '>', "$cfg_dir$output_file") or die "! ERROR{ComputeFileConfig} - Cannot create file $cfg_dir$output_file";
  }else{
	open(CFGOUT, '>', "$cfg_dir$hostname.cfg") or die "! ERROR{ComputeFileConfig} - Cannot create file $cfg_dir$hostname-$device_id.cfg";
  }
}

print CFGOUT "!\n! Variables imported from $csv_file file.\n!\n";
for ($i=0; $i<@csv_fields; $i++) {
	print CFGOUT "! VARIABLE: $csv_fields[$i] = ${$csv_fields[$i]}{$device}\n";
}

# verify all variables in template file are in CSV

print CFGOUT "!\n";

&CreateConfig;

close(TMPL);
close(CFGOUT);

} #end_sub

sub LoadFileCSV{
local $header;
local $index;
local @stuff;
local $count = 0;

# $csv_file opened with filehandle CSV from main()

chop ($header = <CSV>);
@csv_fields = split(/\s*,\s*/, $header);
foreach (@csv_fields) {
	s/[^\w]+//g;
} #end_for

$i=1;
while ( <CSV> ) {
$i++;
chop;
s/^\s*//g; # leading space
s/\s*$//g; # trailing space
@stuff = split(/\s*,\s*/);
$index = $stuff[0];
	for ($i=0; $i<@csv_fields; $i++) {
		${$csv_fields[$i]}{$index} = $stuff[$i];
	} #end_for
$count++;
} #end_while

return $count;
} #end_sub

sub CalculateVars{
local $var_section = 0;
local $var, $var_value, $temp1, $temp2, $eof;
W1: while(<TMPL>){
        chomp;
        if($_ =~ /CALC_VARIABLES/){
                $var_section = 1;
                next W1;
        }
        elsif($_ =~ /END_CALC_VAR/){
                last W1;
        }
        elsif($_ =~ /^#.*/){
                next W1;
        }
#        elsif($var_section){
#                if (($temp1, $var, $temp2, $var_value, $eof) = ($_ =~ /(^\$)(\w*)(\s*=\s*)(.*)(\s|$)/)){
#                                if ($var eq 'device_id'){ next W1;}
#                                P2: print "! Enter value for variable $var:";
#                               $$var = <STDIN>;
#                                chomp($$var);
#                                if (&CheckVariable($var) == 0){goto P2;}
#                } #end_if
#        } #end_elsif 

} #end_while
} #end_sub


sub Usage{
print "USAGE: config_maker {-i | -t <config_template> | -f <csv_file> [-d <directory> | -o <file> | -c | -r <template_file>] | -h}\n\n";
print "	-i			interactive mode - prompted interface\n";
print "	-t <config_template>	template mode - import template with assigned variables\n";
print "	-f <csv_file>		file mode - import data from .csv file\n";
print "	  -d <directory>	 file mode - directory to write configuration files\n";
print "	  -o <file>		 file mode - send all configuration to specified output file\n";
print "	  -c 			 file mode - concatenate output to existing file\n";
print "	  -r <template_file>	 file mode - override template file from csv with specified template filen\n";
print "	-h			help\n\n";
}
